using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HeapSort
{
    class Program
    {
        static void Main(string[] args)
        {
            //堆排序
            int[] arrayData = new int[] { 5, 20, 7, 15, 98, 65, 31, 1, 41, 6, 107, 22, 12 };
            HeapSort(arrayData);
            foreach (int param in arrayData)
            {
                Console.WriteLine(param.ToString());
            }
            Console.ReadKey();
        }

        ///<summary>
        /// 堆排序
        /// </summary>
        /// <param name"sortArray">待排序数组</param>
        /// <returns></returns>
        public static void HeapSort(int[] sortArray)
        {
            int i;
            for (i = sortArray.Length / 2 - 1; i >= 0; i--)//i=lenth-1是从最后一个双亲开始调整，-1是因为数组从0开始
            {
                HeapAdjust(sortArray, i, sortArray.Length - 1);
            }
            for (i = sortArray.Length - 1; i > 0; i--)//将堆顶与最后一个记录交换
            {
                int temp = sortArray[0];
                sortArray[0] = sortArray[i];
                sortArray[i] = temp;
                HeapAdjust(sortArray, 0, i - 1);//重新调整大顶堆
            }
        }

        ///<summary>
        /// 堆调整
        /// </summary>
        /// <param name"sortArray">待排序数组</param>
        /// <returns></returns>
        public static void HeapAdjust(int[] sortArray, int s, int m)
        {
            int temp, j;
            temp = sortArray[s];
            //由于调整后可能导致孩子的位置不正确，所以需要循环去检查孩子
            for (j = 2 * s + 1; j <= m; j *= 2)//由于数组从0开始，所以左孩子的编号要+1
            {
                if (j < m && sortArray[j] < sortArray[j + 1])
                {
                    ++j;
                }
                if (temp > sortArray[j])
                {
                    break;
                }
                sortArray[s] = sortArray[j];
                s = j;
            }
            sortArray[s] = temp;
        }
    }
}
