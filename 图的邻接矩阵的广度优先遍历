public static void BFSTraverse(MGraph graph)
	{
		boolean[] visited=new boolean[graph.verice.length];//顶点的状态数组
		for(int i=0;i<visited.length;i++)//初始化
		{
			visited[i]=false;
		}
		Queue<Integer> vertexQueue=new ArrayDeque<>();//队列
		//
		for(int i=0;i<graph.verice.length;i++)
		{
			if(!visited[i])
			{
				visited[i]=true;
				System.out.println(graph.verice[i]);
				vertexQueue.add(graph.verice[i]);//把访问过的顶点放入队列中
				if(vertexQueue.size()!=0)
				{
					int temp=vertexQueue.poll();
					for(int j=0;j<graph.verice.length;j++)
					{
						if(graph.edges[i][j]==1&& !visited[j])
						{
							visited[j]=true;
							System.out.println(graph.verice[j]);
							vertexQueue.add(graph.verice[j]);
						}
					}
				}
			}
		}
		
		
	}
