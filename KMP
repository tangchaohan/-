using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace KMP
{
    class Program
    {
        static void Main(string[] args)
        {
            string s = "aaaaaaaaaaab";
            string t = "aaaaaaab";
            Console.WriteLine(TrandictionalStringMatching(s, t, 0));
            Console.WriteLine(KMPMatching(s, t, 0));
            Console.ReadKey();
        }

        //传统匹配方法
        public static bool TrandictionalStringMatching(string S, string T, int position)
        {
            int i = position;
            int j = 0;
            while (i < S.Length && j < T.Length)
            {
                if (S[i] == T[j])
                {
                    i++;
                    j++;
                }
                else
                {
                    i=i-j+1;//i=postion+1
                    j = 0;
                }
            }
            if (j == T.Length)
            { return true; }
            else
            { return false; }
        }

        //KMP算法
        public static bool KMPMatching(string S, string T, int position)
        {
            int[] next = GetNextArray(T);
            int i = position;
            int j = 0;
            while (i < S.Length && j < T.Length)
            {
                if (j==-1 || S[i] == T[j])//主串变位判断
                {
                    i++;
                    j++;
                }
                else
                {
                    j = next[j];
                }
            }
            if (j == T.Length )
            { return true; }
            else
            { return false; }
        }

        //求next数组
        private static int[] GetNextArray(string T)
        {
            int[] next = new int[T.Length];
            int i = 0;
            int j = -1;
            next[0] = -1;
            while (i < T.Length -1)
            {
                if (j == -1 || T[i] == T[j])
                {
                    i++;
                    j++;
                    next[i] = j;
                }
                else
                { j = next[j]; }
            }
            return next;

        }

        //求nextval数组
        private static int[] GetNextvalArray(string T)
        {
            int[] nextval = new int[T.Length];
            int i = 0;
            int j = -1;
            nextval[0] = -1;
            while (i < T.Length)
            {
                if (j == -1 || T[i] == T[j])
                {
                    i++;
                    j++;
                    //
                    if (T[i] != T[j])
                    { nextval[i] = j; }
                    else
                    { nextval[i] = nextval[j]; }
                    //
                }
                else
                { j = nextval[j]; }
            }
            return nextval;

        }
    }
}
